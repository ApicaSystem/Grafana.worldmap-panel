{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","_","mapRenderer","DataFormatter","panelDefaults","maxDataPoints","mapCenter","mapCenterLatitude","mapCenterLongitude","initialZoom","valueName","circleMinSize","circleMaxSize","locationData","thresholds","colors","unitSingle","unitPlural","showLegend","esMetric","decimals","hideEmpty","hideZero","stickyLabels","mapCenters","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","defaults","panel","dataFormatter","events","on","onInitEditMode","bind","onDataReceived","onPanelTeardown","onDataSnapshotLoad","loadLocationDataFromFile","tileServer","user","lightTheme","setMapSaturationClass","saturationClass","reload","map","snapshotLocationData","locations","jsonpUrl","jsonpCallback","window","$","ajax","type","url","contentType","dataType","success","res","render","jsonUrl","getJSON","then","pluginId","reloadLocations","refresh","remove","addEditorTab","dataList","dashboard","snapshot","data","setGeohashValues","tableData","tableHandler","setTableValues","series","seriesHandler","setValues","updateThresholdData","length","centerOnLastGeoHash","last","locationLatitude","locationLongitude","setNewMapCenter","snapshotData","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","mapCenterMoved","setZoom","removeLegend","clearCircles","legend","update","split","strValue","Number","trim","size","pop","newColor","push","scope","elem","attrs","ctrl","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACQA,sB,kBAAAA,gB;;AACDC,gB;;AACAC,S;;AAEAC,O;;AACAC,iB;;AACAC,mB;;;;;;;;;;;;;;;;;;;;;AAGDC,mB,GAAgB;AACpBC,uBAAe,CADK;AAEpBC,mBAAW,UAFS;AAGpBC,2BAAmB,CAHC;AAIpBC,4BAAoB,CAJA;AAKpBC,qBAAa,CALO;AAMpBC,mBAAW,OANS;AAOpBC,uBAAe,CAPK;AAQpBC,uBAAe,EARK;AASpBC,sBAAc,WATM;AAUpBC,oBAAY,MAVQ;AAWpBC,gBAAQ,CAAC,wBAAD,EAA2B,0BAA3B,EAAuD,yBAAvD,CAXY;AAYpBC,oBAAY,EAZQ;AAapBC,oBAAY,EAbQ;AAcpBC,oBAAY,IAdQ;AAepBC,kBAAU,OAfU;AAgBpBC,kBAAU,CAhBU;AAiBpBC,mBAAW,KAjBS;AAkBpBC,kBAAU,KAlBU;AAmBpBC,sBAAc;AAnBM,O;AAsBhBC,gB,GAAa;AACjB,oBAAY,EAACjB,mBAAmB,CAApB,EAAuBC,oBAAoB,CAA3C,EADK;AAEjB,yBAAiB,EAACD,mBAAmB,EAApB,EAAwBC,oBAAoB,CAAC,GAA7C,EAFA;AAGjB,kBAAU,EAACD,mBAAmB,EAApB,EAAwBC,oBAAoB,EAA5C,EAHO;AAIjB,qBAAa,EAACD,mBAAmB,EAApB,EAAwBC,oBAAoB,EAA5C,EAJI;AAKjB,mBAAW,EAACD,mBAAmB,EAApB,EAAwBC,oBAAoB,GAA5C,EALM;AAMjB,wBAAgB,EAACD,mBAAmB,CAApB,EAAuBC,oBAAoB,CAA3C;AANC,O;;AASEiB,kB;;;AACnB,8BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,kIACnCF,MADmC,EAC3BC,SAD2B;;AAGzC,gBAAKE,cAAL,CAAoBD,UAApB;AACA3B,YAAE6B,QAAF,CAAW,MAAKC,KAAhB,EAAuB3B,aAAvB;;AAEA,gBAAK4B,aAAL,GAAqB,IAAI7B,aAAJ,QAAwBH,GAAxB,CAArB;;AAEA,gBAAKiC,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKG,cAAL,CAAoBD,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKI,eAAL,CAAqBF,IAArB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKK,kBAAL,CAAwBH,IAAxB,OAArC;;AAEA,gBAAKI,wBAAL;AAbyC;AAc1C;;;;yCAEcZ,U,EAAY;AACzB,iBAAKa,UAAL,GAAkBb,WAAWc,IAAX,CAAgBC,UAAhB,GAA6B,kBAA7B,GAAkD,cAApE;AACA,iBAAKC,qBAAL;AACD;;;kDAEuB;AACtB,gBAAI,KAAKH,UAAL,KAAoB,cAAxB,EAAwC;AACtC,mBAAKI,eAAL,GAAuB,YAAvB;AACD,aAFD,MAEO;AACL,mBAAKA,eAAL,GAAuB,EAAvB;AACD;AACF;;;mDAEwBC,M,EAAQ;AAAA;;AAC/B,gBAAI,KAAKC,GAAL,IAAY,CAACD,MAAjB,EAAyB;;AAEzB,gBAAI,KAAKf,KAAL,CAAWiB,oBAAf,EAAqC;AACnC,mBAAKC,SAAL,GAAiB,KAAKlB,KAAL,CAAWiB,oBAA5B;AACA;AACD;;AAED,gBAAI,KAAKjB,KAAL,CAAWlB,YAAX,KAA4B,gBAAhC,EAAkD;AAChD,kBAAI,CAAC,KAAKkB,KAAL,CAAWmB,QAAZ,IAAwB,CAAC,KAAKnB,KAAL,CAAWoB,aAAxC,EAAuD;;AAEvDC,qBAAOC,CAAP,CAASC,IAAT,CAAc;AACZC,sBAAM,KADM;AAEZC,qBAAK,KAAKzB,KAAL,CAAWmB,QAAX,GAAsB,aAFf;AAGZO,6BAAa,kBAHD;AAIZN,+BAAe,KAAKpB,KAAL,CAAWoB,aAJd;AAKZO,0BAAU,OALE;AAMZC,yBAAS,iBAACC,GAAD,EAAS;AAChB,yBAAKX,SAAL,GAAiBW,GAAjB;AACA,yBAAKC,MAAL;AACD;AATW,eAAd;AAWD,aAdD,MAcO,IAAI,KAAK9B,KAAL,CAAWlB,YAAX,KAA4B,eAAhC,EAAiD;AACtD,kBAAI,CAAC,KAAKkB,KAAL,CAAW+B,OAAhB,EAAyB;;AAEzBV,qBAAOC,CAAP,CAASU,OAAT,CAAiB,KAAKhC,KAAL,CAAW+B,OAA5B,EAAqCE,IAArC,CAA0C,UAACJ,GAAD,EAAS;AACjD,uBAAKX,SAAL,GAAiBW,GAAjB;AACA,uBAAKC,MAAL;AACD,eAHD;AAID,aAPM,MAOA,IAAI,KAAK9B,KAAL,CAAWlB,YAAX,KAA4B,OAAhC,EAAyC;AAC9C;AACD,aAFM,MAEA,IAAI,KAAKkB,KAAL,CAAWlB,YAAX,KAA4B,SAAhC,EAA2C;AAChDuC,qBAAOC,CAAP,CAASU,OAAT,CAAiB,oBAAkB,KAAKE,QAAvB,cAA0C,KAAKlC,KAAL,CAAWlB,YAArD,GAAoE,OAArF,EACGmD,IADH,CACQ,KAAKE,eAAL,CAAqB9B,IAArB,CAA0B,IAA1B,CADR;AAED;AACF;;;0CAEewB,G,EAAK;AACnB,iBAAKX,SAAL,GAAiBW,GAAjB;AACA,iBAAKO,OAAL;AACD;;;4CAEiB;AAChB,gBAAI,KAAKpB,GAAT,EAAc,KAAKA,GAAL,CAASqB,MAAT;AACf;;;2CAEgB;AACf,iBAAKC,YAAL,CAAkB,UAAlB,sBAAgD,KAAKJ,QAArD,4BAAsF,CAAtF;AACD;;;yCAEcK,Q,EAAU;AACvB,gBAAI,CAACA,QAAL,EAAe;;AAEf,gBAAI,KAAKC,SAAL,CAAeC,QAAf,IAA2B,KAAKvB,SAApC,EAA+C;AAC7C,mBAAKlB,KAAL,CAAWiB,oBAAX,GAAkC,KAAKC,SAAvC;AACD;;AAED,gBAAMwB,OAAO,EAAb;;AAEA,gBAAI,KAAK1C,KAAL,CAAWlB,YAAX,KAA4B,SAAhC,EAA2C;AACzC,mBAAKmB,aAAL,CAAmB0C,gBAAnB,CAAoCJ,QAApC,EAA8CG,IAA9C;AACD,aAFD,MAEO,IAAI,KAAK1C,KAAL,CAAWlB,YAAX,KAA4B,OAAhC,EAAyC;AAC9C,kBAAM8D,YAAYL,SAASvB,GAAT,CAAa5C,cAAcyE,YAAd,CAA2BxC,IAA3B,CAAgC,IAAhC,CAAb,CAAlB;AACA,mBAAKJ,aAAL,CAAmB6C,cAAnB,CAAkCF,SAAlC,EAA6CF,IAA7C;AACD,aAHM,MAGA;AACL,mBAAKK,MAAL,GAAcR,SAASvB,GAAT,CAAa,KAAKgC,aAAL,CAAmB3C,IAAnB,CAAwB,IAAxB,CAAb,CAAd;AACA,mBAAKJ,aAAL,CAAmBgD,SAAnB,CAA6BP,IAA7B;AACD;AACD,iBAAKA,IAAL,GAAYA,IAAZ;;AAEA,iBAAKQ,mBAAL;;AAEA,gBAAI,KAAKR,IAAL,CAAUS,MAAV,IAAoB,KAAKnD,KAAL,CAAWzB,SAAX,KAAyB,cAAjD,EAAiE;AAC/D,mBAAK6E,mBAAL;AACD,aAFD,MAEO;AACL,mBAAKtB,MAAL;AACD;AACF;;;gDAEqB;AACpBrC,uBAAW,KAAKO,KAAL,CAAWzB,SAAtB,EAAiCC,iBAAjC,GAAqDN,EAAEmF,IAAF,CAAO,KAAKX,IAAZ,EAAkBY,gBAAvE;AACA7D,uBAAW,KAAKO,KAAL,CAAWzB,SAAtB,EAAiCE,kBAAjC,GAAsDP,EAAEmF,IAAF,CAAO,KAAKX,IAAZ,EAAkBa,iBAAxE;AACA,iBAAKC,eAAL;AACD;;;6CAEkBC,Y,EAAc;AAC/B,iBAAKnD,cAAL,CAAoBmD,YAApB;AACD;;;wCAEaC,U,EAAY;AACxB,gBAAMX,SAAS,IAAI/E,UAAJ,CAAe;AAC5B2F,0BAAYD,WAAWC,UADK;AAE5BC,qBAAOF,WAAWG;AAFU,aAAf,CAAf;;AAKAd,mBAAOe,SAAP,GAAmBf,OAAOgB,YAAP,CAAoB,KAAK/D,KAAL,CAAWgE,aAA/B,CAAnB;AACA,mBAAOjB,MAAP;AACD;;;4CAEiB;AAChB,gBAAI,KAAK/C,KAAL,CAAWzB,SAAX,KAAyB,QAA7B,EAAuC;AACrC,mBAAKyB,KAAL,CAAWxB,iBAAX,GAA+BiB,WAAW,KAAKO,KAAL,CAAWzB,SAAtB,EAAiCC,iBAAhE;AACA,mBAAKwB,KAAL,CAAWvB,kBAAX,GAAgCgB,WAAW,KAAKO,KAAL,CAAWzB,SAAtB,EAAiCE,kBAAjE;AACD;AACD,iBAAKwF,cAAL,GAAsB,IAAtB;AACA,iBAAKnC,MAAL;AACD;;;oCAES;AACR,iBAAKd,GAAL,CAASkD,OAAT,CAAiB,KAAKlE,KAAL,CAAWtB,WAAX,IAA0B,CAA3C;AACD;;;yCAEc;AACb,gBAAI,CAAC,KAAKsB,KAAL,CAAWb,UAAhB,EAA4B;AAC1B,mBAAK6B,GAAL,CAASmD,YAAT;AACD;AACD,iBAAKrC,MAAL;AACD;;;+CAEoB;AACnB,iBAAKd,GAAL,CAASoD,YAAT;AACA,iBAAKtC,MAAL;AACD;;;6CAEkB;AACjB,iBAAKoB,mBAAL;AACA,iBAAKlC,GAAL,CAASqD,MAAT,CAAgBC,MAAhB;AACA,iBAAKxC,MAAL;AACD;;;gDAEqB;AACpB,iBAAKY,IAAL,CAAU3D,UAAV,GAAuB,KAAKiB,KAAL,CAAWjB,UAAX,CAAsBwF,KAAtB,CAA4B,GAA5B,EAAiCvD,GAAjC,CAAqC,UAACwD,QAAD,EAAc;AACxE,qBAAOC,OAAOD,SAASE,IAAT,EAAP,CAAP;AACD,aAFsB,CAAvB;AAGA,mBAAOxG,EAAEyG,IAAF,CAAO,KAAK3E,KAAL,CAAWhB,MAAlB,IAA4Bd,EAAEyG,IAAF,CAAO,KAAKjC,IAAL,CAAU3D,UAAjB,IAA+B,CAAlE,EAAqE;AACnE;AACA,mBAAKiB,KAAL,CAAWhB,MAAX,CAAkB4F,GAAlB;AACD;AACD,mBAAO1G,EAAEyG,IAAF,CAAO,KAAK3E,KAAL,CAAWhB,MAAlB,IAA4Bd,EAAEyG,IAAF,CAAO,KAAKjC,IAAL,CAAU3D,UAAjB,IAA+B,CAAlE,EAAqE;AACnE;AACA,kBAAM8F,WAAW,yBAAjB;AACA,mBAAK7E,KAAL,CAAWhB,MAAX,CAAkB8F,IAAlB,CAAuBD,QAAvB;AACD;AACF;;;+CAEoB;AACnB,iBAAKpE,wBAAL,CAA8B,IAA9B;;AAEA,gBAAI,KAAKT,KAAL,CAAWlB,YAAX,KAA4B,SAAhC,EAA2C;AACzC,mBAAKgD,MAAL;AACD;AACF;;;+BAGIiD,K,EAAOC,I,EAAMC,K,EAAOC,I,EAAM;AAC7B/G,wBAAY4G,KAAZ,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,IAAhC;AACD;;;;QA1LuCnH,gB;;yBAArB2B,Y;;AA6LrBA,mBAAayF,WAAb,GAA2B,aAA3B","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\r\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nimport _ from 'lodash';\r\nimport mapRenderer from './map_renderer';\r\nimport DataFormatter from './data_formatter';\r\nimport './css/worldmap-panel.css!';\r\n\r\nconst panelDefaults = {\r\n  maxDataPoints: 1,\r\n  mapCenter: '(0째, 0째)',\r\n  mapCenterLatitude: 0,\r\n  mapCenterLongitude: 0,\r\n  initialZoom: 1,\r\n  valueName: 'total',\r\n  circleMinSize: 2,\r\n  circleMaxSize: 30,\r\n  locationData: 'countries',\r\n  thresholds: '0,10',\r\n  colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\r\n  unitSingle: '',\r\n  unitPlural: '',\r\n  showLegend: true,\r\n  esMetric: 'Count',\r\n  decimals: 0,\r\n  hideEmpty: false,\r\n  hideZero: false,\r\n  stickyLabels: false\r\n};\r\n\r\nconst mapCenters = {\r\n  '(0째, 0째)': {mapCenterLatitude: 0, mapCenterLongitude: 0},\r\n  'North America': {mapCenterLatitude: 40, mapCenterLongitude: -100},\r\n  'Europe': {mapCenterLatitude: 46, mapCenterLongitude: 14},\r\n  'West Asia': {mapCenterLatitude: 26, mapCenterLongitude: 53},\r\n  'SE Asia': {mapCenterLatitude: 10, mapCenterLongitude: 106},\r\n  'Last GeoHash': {mapCenterLatitude: 0, mapCenterLongitude: 0}\r\n};\r\n\r\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\r\n  constructor($scope, $injector, contextSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.setMapProvider(contextSrv);\r\n    _.defaults(this.panel, panelDefaults);\r\n\r\n    this.dataFormatter = new DataFormatter(this, kbn);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\r\n\r\n    this.loadLocationDataFromFile();\r\n  }\r\n\r\n  setMapProvider(contextSrv) {\r\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\r\n    this.setMapSaturationClass();\r\n  }\r\n\r\n  setMapSaturationClass() {\r\n    if (this.tileServer === 'CartoDB Dark') {\r\n      this.saturationClass = 'map-darken';\r\n    } else {\r\n      this.saturationClass = '';\r\n    }\r\n  }\r\n\r\n  loadLocationDataFromFile(reload) {\r\n    if (this.map && !reload) return;\r\n\r\n    if (this.panel.snapshotLocationData) {\r\n      this.locations = this.panel.snapshotLocationData;\r\n      return;\r\n    }\r\n\r\n    if (this.panel.locationData === 'jsonp endpoint') {\r\n      if (!this.panel.jsonpUrl || !this.panel.jsonpCallback) return;\r\n\r\n      window.$.ajax({\r\n        type: 'GET',\r\n        url: this.panel.jsonpUrl + '?callback=?',\r\n        contentType: 'application/json',\r\n        jsonpCallback: this.panel.jsonpCallback,\r\n        dataType: 'jsonp',\r\n        success: (res) => {\r\n          this.locations = res;\r\n          this.render();\r\n        }\r\n      });\r\n    } else if (this.panel.locationData === 'json endpoint') {\r\n      if (!this.panel.jsonUrl) return;\r\n\r\n      window.$.getJSON(this.panel.jsonUrl).then((res) => {\r\n        this.locations = res;\r\n        this.render();\r\n      });\r\n    } else if (this.panel.locationData === 'table') {\r\n      // .. Do nothing\r\n    } else if (this.panel.locationData !== 'geohash') {\r\n      window.$.getJSON(`public/plugins/${this.pluginId}/data/` + this.panel.locationData + '.json')\r\n        .then(this.reloadLocations.bind(this));\r\n    }\r\n  }\r\n\r\n  reloadLocations(res) {\r\n    this.locations = res;\r\n    this.refresh();\r\n  }\r\n\r\n  onPanelTeardown() {\r\n    if (this.map) this.map.remove();\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Worldmap', `public/plugins/${this.pluginId}/partials/editor.html`, 2);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    if (!dataList) return;\r\n\r\n    if (this.dashboard.snapshot && this.locations) {\r\n      this.panel.snapshotLocationData = this.locations;\r\n    }\r\n\r\n    const data = [];\r\n\r\n    if (this.panel.locationData === 'geohash') {\r\n      this.dataFormatter.setGeohashValues(dataList, data);\r\n    } else if (this.panel.locationData === 'table') {\r\n      const tableData = dataList.map(DataFormatter.tableHandler.bind(this));\r\n      this.dataFormatter.setTableValues(tableData, data);\r\n    } else {\r\n      this.series = dataList.map(this.seriesHandler.bind(this));\r\n      this.dataFormatter.setValues(data);\r\n    }\r\n    this.data = data;\r\n\r\n    this.updateThresholdData();\r\n\r\n    if (this.data.length && this.panel.mapCenter === 'Last GeoHash') {\r\n      this.centerOnLastGeoHash();\r\n    } else {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  centerOnLastGeoHash() {\r\n    mapCenters[this.panel.mapCenter].mapCenterLatitude = _.last(this.data).locationLatitude;\r\n    mapCenters[this.panel.mapCenter].mapCenterLongitude = _.last(this.data).locationLongitude;\r\n    this.setNewMapCenter();\r\n  }\r\n\r\n  onDataSnapshotLoad(snapshotData) {\r\n    this.onDataReceived(snapshotData);\r\n  }\r\n\r\n  seriesHandler(seriesData) {\r\n    const series = new TimeSeries({\r\n      datapoints: seriesData.datapoints,\r\n      alias: seriesData.target,\r\n    });\r\n\r\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n    return series;\r\n  }\r\n\r\n  setNewMapCenter() {\r\n    if (this.panel.mapCenter !== 'custom') {\r\n      this.panel.mapCenterLatitude = mapCenters[this.panel.mapCenter].mapCenterLatitude;\r\n      this.panel.mapCenterLongitude = mapCenters[this.panel.mapCenter].mapCenterLongitude;\r\n    }\r\n    this.mapCenterMoved = true;\r\n    this.render();\r\n  }\r\n\r\n  setZoom() {\r\n    this.map.setZoom(this.panel.initialZoom || 1);\r\n  }\r\n\r\n  toggleLegend() {\r\n    if (!this.panel.showLegend) {\r\n      this.map.removeLegend();\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  toggleStickyLabels() {\r\n    this.map.clearCircles();\r\n    this.render();\r\n  }\r\n\r\n  changeThresholds() {\r\n    this.updateThresholdData();\r\n    this.map.legend.update();\r\n    this.render();\r\n  }\r\n\r\n  updateThresholdData() {\r\n    this.data.thresholds = this.panel.thresholds.split(',').map((strValue) => {\r\n      return Number(strValue.trim());\r\n    });\r\n    while (_.size(this.panel.colors) > _.size(this.data.thresholds) + 1) {\r\n      // too many colors. remove the last one.\r\n      this.panel.colors.pop();\r\n    }\r\n    while (_.size(this.panel.colors) < _.size(this.data.thresholds) + 1) {\r\n      // not enough colors. add one.\r\n      const newColor = 'rgba(50, 172, 45, 0.97)';\r\n      this.panel.colors.push(newColor);\r\n    }\r\n  }\r\n\r\n  changeLocationData() {\r\n    this.loadLocationDataFromFile(true);\r\n\r\n    if (this.panel.locationData === 'geohash') {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n/* eslint class-methods-use-this: 0 */\r\n  link(scope, elem, attrs, ctrl) {\r\n    mapRenderer(scope, elem, attrs, ctrl);\r\n  }\r\n}\r\n\r\nWorldmapCtrl.templateUrl = 'module.html';\r\n"]}